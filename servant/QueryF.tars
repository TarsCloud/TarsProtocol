/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations under the License.
 */

#include "EndpointF.tars"

module tars
{

	struct GetMasterSlaveLock
	{
		0 optional string application;
		1 optional string server_name;
		2 optional string node_name;
		3 optional bool isMaster;
		4 optional bool lastErr;
		5 optional int  timeout;		//超时毫秒
		6 optional int  bakType;		//0 不需要切换，1：自动主从切换， 2：自动切换但是不屏蔽主控路由
	};

    /** 
     * 获取对象endpoint的query接口
     */

    interface QueryF
    {
        /** 根据id获取对象
         *
         * @param id 对象名称
         *
         * @return  返回所有该对象的活动endpoint列表
         */
        vector<EndpointF> findObjectById(string id);
        
        /**根据id获取所有对象,包括活动和非活动对象
        *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectById4Any(string id, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);

        /** 根据id获取对象所有endpoint列表,功能同findObjectByIdInSameGroup
         *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectById4All(string id, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);
        
        /** 根据id获取对象同组endpoint列表
         *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectByIdInSameGroup(string id, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);


        /** 根据id获取对象指定归属地的endpoint列表
         *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectByIdInSameStation(string id, string sStation, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);
        
        /** 根据id获取对象同组endpoint列表
        *
        * @param id         对象名称
        * @param setId      set全称,格式为setname.setarea.setgroup
        * @param activeEp   存活endpoint列表
        * @param inactiveEp 非存活endpoint列表
        * @return:  0-成功  others-失败
        */
        int findObjectByIdInSameSet(string id, string setId, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);

		/** 注册数据变化的通知, 通知变化内容(企业版功能)
		 *
		 * @param name       当前模块名称
		 * @return:  0-成功  others-失败
		 */
		int registerChange(map<string, string> timestamp, string name);

		/** 注册id变化的通知, 通知时后需要自己主动调用find去查找(企业版功能)
		 *
		 * @param id         对象名称
		 * @param name       当前模块名称
		 * @return:  0-成功  others-失败
		 */
		int registerQuery(string id, string name);

		/**
		 * 获取锁, 实现业务服务一主多备的模式(企业版功能)
		 * @param req
		 * @return 0: 获取锁成功； 1：获取锁失败； 2： 数据异常， -1：其他异常
		 */
		int getLocker(GetMasterSlaveLock req);

    };

};


