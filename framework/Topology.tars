module tars 
{
     struct Vertex
     {
        0 require string vertex;
        1 require long   callCount;
        2 require long   callTime;
     };
     key[Vertex,vertex];

    struct Edge
    {
        0 require string fromVertex;
        1 require string toVertex;
        2 require long   callCount;
        3 require long   callTime;
        4 require string spanId;
        5 require long csTime;
        6 require long srTime;
        7 require long ssTime;
        8 require long crTime;
        9 require string csData;
        10 require string srData;
        11 require string ssData;
        12 require string crData;
        13 require string ret;
        14 require int order;
    };
    key[Edge,order,csTime,fromVertex,toVertex];

    struct Graph {
        0 require vector<Vertex> vs;
        1 require vector<Edge> es;
    };

    struct Summary{
        0 require string name;
        1 require long startTime;
        2 require long endTime;
    };


    interface Topology
    {
        int graphServer(string date, string serverName, out vector<Graph> graph);

        int graphFunction(string date, string functionName, out vector<Graph> graph);

        int graphTrace(string date, string traceId, out Graph graph);

        int listFunction(string date, string serverName, out vector<string> fs);

        int listTrace(string date, string serverName, out vector<string> ts);

        int listTraceSummary(string date, long beginTime,long endTime, string serverName, out vector<Summary> ts);
    };
};